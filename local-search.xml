<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS中字符串的属性及方法</title>
    <link href="/2024/07/05/JS%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/05/JS%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-中字符串的属性及方法"><a href="#JS-中字符串的属性及方法" class="headerlink" title="JS 中字符串的属性及方法"></a>JS 中字符串的属性及方法</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="1-length"><a href="#1-length" class="headerlink" title="1. length"></a>1. length</h3><p>字符串的长度，即字符串中字符的个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>); <span class="hljs-comment">// 11</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="2-charAt-index"><a href="#2-charAt-index" class="headerlink" title="2. charAt(index)"></a>2. charAt(index)</h3><p>返回指定位置的字符，index 为字符串中的索引，从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// h</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// e</span><br></code></pre></td></tr></table></figure><h3 id="3-charCodeAt-index"><a href="#3-charCodeAt-index" class="headerlink" title="3. charCodeAt(index)"></a>3. charCodeAt(index)</h3><p>返回指定位置的字符的 Unicode 编码，index 为字符串中的索引，从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 104</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 101</span><br></code></pre></td></tr></table></figure><h3 id="4-indexOf-searchValue-fromIndex"><a href="#4-indexOf-searchValue-fromIndex" class="headerlink" title="4. indexOf(searchValue, fromIndex)"></a>4. indexOf(searchValue, fromIndex)</h3><p>返回指定子字符串在原字符串中首次出现的位置，返回索引。未找到时返回 -1。可选参数 fromIndex 指定起始搜索位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;o&quot;</span>)); <span class="hljs-comment">// 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 7</span><br></code></pre></td></tr></table></figure><h3 id="5-lastIndexOf-searchValue-fromIndex"><a href="#5-lastIndexOf-searchValue-fromIndex" class="headerlink" title="5. lastIndexOf(searchValue, fromIndex)"></a>5. lastIndexOf(searchValue, fromIndex)</h3><p>返回指定字符在字符串中最后一次出现的位置，fromIndex 为开始查找的位置，默认为字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;o&quot;</span>)); <span class="hljs-comment">// 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="6-slice-start-end"><a href="#6-slice-start-end" class="headerlink" title="6. slice(start, end)"></a>6. slice(start, end)</h3><p>返回从 start 到 end（不包括 end）之间的字符串，start 和 end 为字符串中的索引，从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// hello</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">6</span>, <span class="hljs-number">11</span>)); <span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><h3 id="7-substring-start-end"><a href="#7-substring-start-end" class="headerlink" title="7. substring(start, end)"></a>7. substring(start, end)</h3><p>返回从 start 到 end（不包括 end）之间的字符串，start 和 end 为字符串中的索引，从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// hello</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">6</span>, <span class="hljs-number">11</span>)); <span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><h3 id="8-substr-start-length"><a href="#8-substr-start-length" class="headerlink" title="8. substr(start, length)"></a>8. substr(start, length)</h3><p>返回从 start 开始的 length 个字符，start 为字符串中的索引，从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// hello</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><h3 id="9-split-separator-limit"><a href="#9-split-separator-limit" class="headerlink" title="9. split(separator, limit)"></a>9. split(separator, limit)</h3><p>将字符串分割成数组，separator 为分割符，limit 为返回数组的最大长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">// [&quot;hello&quot;, &quot;world&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">1</span>)); <span class="hljs-comment">// [&quot;hello&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="10-toLowerCase"><a href="#10-toLowerCase" class="headerlink" title="10. toLowerCase()"></a>10. toLowerCase()</h3><p>将字符串转换为小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">toLowerCase</span>()); <span class="hljs-comment">// hello world</span><br></code></pre></td></tr></table></figure><h3 id="11-toUpperCase"><a href="#11-toUpperCase" class="headerlink" title="11. toUpperCase()"></a>11. toUpperCase()</h3><p>将字符串转换为大写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">toUpperCase</span>()); <span class="hljs-comment">// HELLO WORLD</span><br></code></pre></td></tr></table></figure><h3 id="12-trim"><a href="#12-trim" class="headerlink" title="12. trim()"></a>12. trim()</h3><p>去除字符串两端的空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;  hello world  &quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trim</span>()); <span class="hljs-comment">// hello world</span><br></code></pre></td></tr></table></figure><h3 id="13-replace-searchValue-replaceValue"><a href="#13-replace-searchValue-replaceValue" class="headerlink" title="13. replace(searchValue, replaceValue)"></a>13. replace(searchValue, replaceValue)</h3><p>将字符串中的 searchValue 替换为 replaceValue。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;JavaScript&quot;</span>)); <span class="hljs-comment">// hello JavaScript</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/o/g</span>, <span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">// hella warld</span><br></code></pre></td></tr></table></figure><h3 id="14-match-regexp"><a href="#14-match-regexp" class="headerlink" title="14. match(regexp)"></a>14. match(regexp)</h3><p>返回一个数组，包含字符串中与正则表达式匹配的子串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/o/g</span>)); <span class="hljs-comment">// [&quot;o&quot;, &quot;o&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="15-search-regexp"><a href="#15-search-regexp" class="headerlink" title="15. search(regexp)"></a>15. search(regexp)</h3><p>返回字符串中第一个与正则表达式匹配的子串的索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/o/</span>)); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="16-trimLeft"><a href="#16-trimLeft" class="headerlink" title="16. trimLeft()"></a>16. trimLeft()</h3><p>去除字符串左端的空白字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;  hello world  &quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trimLeft</span>()); <span class="hljs-comment">// hello world</span><br></code></pre></td></tr></table></figure><h3 id="17-trimRight"><a href="#17-trimRight" class="headerlink" title="17. trimRight()"></a>17. trimRight()</h3><p>去除字符串右端的空白字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;  hello world  &quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trimRight</span>()); <span class="hljs-comment">//   hello world</span><br></code></pre></td></tr></table></figure><h3 id="18-includes-searchValue-fromIndex"><a href="#18-includes-searchValue-fromIndex" class="headerlink" title="18. includes(searchValue, fromIndex)"></a>18. includes(searchValue, fromIndex)</h3><p>判断字符串是否包含 searchValue，fromIndex 为开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;o&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-number">8</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="19-startsWith-searchValue-fromIndex"><a href="#19-startsWith-searchValue-fromIndex" class="headerlink" title="19. startsWith(searchValue, fromIndex)"></a>19. startsWith(searchValue, fromIndex)</h3><p>判断字符串是否以 searchValue 开头，fromIndex 为开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;h&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">1</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="20-endsWith-searchValue-fromIndex"><a href="#20-endsWith-searchValue-fromIndex" class="headerlink" title="20. endsWith(searchValue, fromIndex)"></a>20. endsWith(searchValue, fromIndex)</h3><p>判断字符串是否以 searchValue 结尾，fromIndex 为开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;d&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="21-repeat-count"><a href="#21-repeat-count" class="headerlink" title="21. repeat(count)"></a>21. repeat(count)</h3><p>返回一个新字符串，该字符串包含 count 个 str 的副本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>)); <span class="hljs-comment">// hellohellohello</span><br></code></pre></td></tr></table></figure><h3 id="22-concat-‘hole’-‘world’"><a href="#22-concat-‘hole’-‘world’" class="headerlink" title="22. concat(‘hole’, ‘world’)"></a>22. concat(‘hole’, ‘world’)</h3><p>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;world&quot;</span>)); <span class="hljs-comment">// helloworld</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;!!!&quot;</span>)); <span class="hljs-comment">// helloworld!!!</span><br></code></pre></td></tr></table></figure><h3 id="23-at-index"><a href="#23-at-index" class="headerlink" title="23. at(index)"></a>23. at(index)</h3><p>返回指定位置的字符，支持负索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// h</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>)); <span class="hljs-comment">// d</span><br></code></pre></td></tr></table></figure><h3 id="24-padStart-targetLength-padString"><a href="#24-padStart-targetLength-padString" class="headerlink" title="24. padStart(targetLength, padString)"></a>24. padStart(targetLength, padString)</h3><p>用 padString 填充字符串，使字符串达到 targetLength 的长度，从字符串的头部开始填充。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//     hello</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;0&quot;</span>)); <span class="hljs-comment">// 00000hello</span><br></code></pre></td></tr></table></figure><h3 id="25-padEnd-targetLength-padString"><a href="#25-padEnd-targetLength-padString" class="headerlink" title="25. padEnd(targetLength, padString)"></a>25. padEnd(targetLength, padString)</h3><p>用 padString 填充字符串，使字符串达到 targetLength 的长度，从字符串的尾部开始填充。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">// hello</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;0&quot;</span>)); <span class="hljs-comment">// hello00000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Websoket的使用及封装</title>
    <link href="/2024/07/02/websoket%E5%9C%A8%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B0%81%E8%A3%85/"/>
    <url>/2024/07/02/websoket%E5%9C%A8%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Websoket-的使用及封装"><a href="#Websoket-的使用及封装" class="headerlink" title="Websoket 的使用及封装"></a>Websoket 的使用及封装</h2><h4 id="WebSocket-是什么？"><a href="#WebSocket-是什么？" class="headerlink" title="WebSocket 是什么？"></a>WebSocket 是什么？</h4><p>WebSocket 是基于 TCP 的一种新的应用层网络协议。它提供了一个<strong>全双工</strong>的通道，允许服务器和客户端之间实时双向通信。因此，在 WebSocket 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输，客户端和服务器之间的数据交换变得更加简单。</p><h4 id="WebSocket-特点"><a href="#WebSocket-特点" class="headerlink" title="WebSocket 特点"></a>WebSocket 特点</h4><ul><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。</li></ul><h4 id="WebSocket-优缺点"><a href="#WebSocket-优缺点" class="headerlink" title="WebSocket 优缺点"></a>WebSocket 优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>较少的控制开销。</li><li>更强的实时性。</li><li>能更好的节省服务器资源和带宽。</li><li>支持双向通信，实时性更强。</li><li>更好的二进制支持。</li><li>支持扩展。</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>协议标识符是 ws，而不是我们常使用的 http，所以无法通过浏览器直接访问，必须从支持 WebSocket 协议的客户端发起请求才能建立连接。</li><li>服务器端的实现必须对 WebSocket 协议进行支持。</li><li>客户端支持度不好，需要考虑浏览器兼容性。</li></ul><h4 id="与-HTTP-协议的区别"><a href="#与-HTTP-协议的区别" class="headerlink" title="与 HTTP 协议的区别"></a>与 HTTP 协议的区别</h4><p>与 HTTP 协议相比，WebSocket 具有以下优点：</p><ul><li>更高的实时性能：WebSocket 允许服务器和客户端之间实时双向通信，从而提高了实时通信场景中的性能。</li><li>更少的网络开销：HTTP 请求和响应之间需要额外的数据传输，而 WebSocket 通过在同一个连接上双向通信，减少了网络开销。</li><li>更灵活的通信方式：HTTP 请求和响应通常是一一对应的，而 WebSocket 允许服务器和客户端之间以多种方式进行通信，例如消息 Push、事件推送等。</li><li>更简洁的 API：WebSocket 提供了简洁的 API，使得客户端开发人员可以更轻松地进行实时通信。</li></ul><h4 id="WebSocket-对象的属性和方法："><a href="#WebSocket-对象的属性和方法：" class="headerlink" title="WebSocket 对象的属性和方法："></a>WebSocket 对象的属性和方法：</h4><ul><li><strong>WebSocket</strong> 对象：WebSocket 对象表示一个新的 WebSocket 连接。</li><li><strong>WebSocket.onopen</strong> 事件处理程序：当 WebSocket 连接打开时触发。</li><li><strong>WebSocket.onmessage</strong> 事件处理程序：当接收到来自 WebSocket 的消息时触发。</li><li><strong>WebSocket.onerror</strong> 事件处理程序：当 WebSocket 发生错误时触发。</li><li><strong>WebSocket.onclose</strong> 事件处理程序：当 WebSocket 连接关闭时触发。</li><li><strong>WebSocket.send</strong> 方法：向 WebSocket 发送数据。</li><li><strong>WebSocket.close</strong> 方法：关闭 WebSocket 连接。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li>创建和连接 WebSocket</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建WebSocket对象</span><br><span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中，ws:&#x2F;&#x2F;localhost:8080 是 WebSocket 的 URL，表示要连接的服务器。</p><ol start="2"><li>连接 WebSocket</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 连接成功事件</span><br>socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket 连接已打开&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>接收来自 WebSocket 的消息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 接收到消息事件</span><br>socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;接收到消息：&quot;</span>, event.<span class="hljs-property">data</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="4"><li>向 WebSocket 发送消息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发送消息</span><br>socket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello, WebSocket!&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="5"><li>关闭 WebSocket 连接</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 关闭WebSocket连接</span><br>socket.<span class="hljs-title function_">close</span>();<br></code></pre></td></tr></table></figure><h4 id="WebSocket-代码示例"><a href="#WebSocket-代码示例" class="headerlink" title="WebSocket 代码示例"></a>WebSocket 代码示例</h4><p>以下是一个简单的 WebSocket 示例，通过 WebSocket 向服务器发送数据，并接收服务器返回的数据：</p><ol><li>首先，创建一个 HTML 文件，添加一个按钮和一个用于显示消息的文本框：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket 示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span>&gt;</span>发送消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageBox&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>接下来，创建一个 JavaScript 文件（例如 main.js），并在其中编写以下代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取按钮和文本框元素</span><br><span class="hljs-keyword">const</span> sendBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendBtn&quot;</span>);<br><span class="hljs-keyword">const</span> messageBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;messageBox&quot;</span>);<br><br><span class="hljs-comment">// 创建 WebSocket 对象</span><br><span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080&quot;</span>); <span class="hljs-comment">// 使用一个 WebSocket 服务器进行测试</span><br><br><span class="hljs-comment">// 设置 WebSocket 连接打开时的回调函数</span><br>socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket 连接已打开&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 设置 WebSocket 接收到消息时的回调函数</span><br>socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket 接收到消息:&quot;</span>, event.<span class="hljs-property">data</span>);<br>  messageBox.<span class="hljs-property">value</span> += event.<span class="hljs-property">data</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;;<br><br><span class="hljs-comment">// 设置 WebSocket 发生错误时的回调函数</span><br>socket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket 发生错误&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 设置 WebSocket 连接关闭时的回调函数</span><br>socket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket 连接已关闭&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 点击按钮时发送消息</span><br>sendBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> message = <span class="hljs-string">&quot;Hello, WebSocket!&quot;</span>;<br>  socket.<span class="hljs-title function_">send</span>(message);<br>  messageBox.<span class="hljs-property">value</span> += <span class="hljs-string">&quot;发送消息: &quot;</span> + message + <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="WebSocket-应用场景"><a href="#WebSocket-应用场景" class="headerlink" title="WebSocket 应用场景"></a>WebSocket 应用场景</h4><ul><li>实时聊天应用：WebSocket 可以支持在线聊天室、即时通讯工具等，实现用户之间的实时消息交换 。</li><li>协同编辑：在多人协作编辑文档或编程时，WebSocket 可以确保所有参与者对文档的更改能够实时同步 。</li><li>在线游戏：WebSocket 适用于需要实时状态同步和玩家交互的多人在线游戏 。</li><li>实时数据更新：例如股票、外汇市场的实时报价更新，新闻或社交媒体的实时推送通知 。</li><li>物联网(IoT)：在智能家居、工业自动化等场景中，WebSocket 可以用于设备状态的实时监控和远程控制 。</li><li>地理定位应用：实时位置追踪和导航应用中的动态路线更新 。</li><li>直播互动：直播平台中的实时评论、弹幕、礼物赠送等功能 。</li><li>数据分析与监控：实时仪表盘、日志流处理、性能监控系统的实时数据展示与报警 。</li><li>多媒体聊天：WebSocket 结合 HTML5 音视频元素，可以用于视频会议等多媒体聊天场景 。</li><li>基于位置的应用：WebSocket 可以用于基于 GPS 的实时位置数据传输，如运动轨迹记录或实时数据仪表盘更新 。</li><li>在线教育：WebSocket 可以用于在线教育平台，支持多媒体聊天、文字聊天以及在公共数字黑板上的协作 。</li></ul><h4 id="利用单例模式创建-Websocket-连接"><a href="#利用单例模式创建-Websocket-连接" class="headerlink" title="利用单例模式创建 Websocket 连接"></a>利用单例模式创建 Websocket 连接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketSingleton</span> &#123;<br>  <span class="hljs-keyword">static</span> instance;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">WebSocketSingleton</span>.<span class="hljs-property">instance</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">WebSocketSingleton</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> = url;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-title class_">WebSocketSingleton</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span>);<br><br>    <span class="hljs-comment">// 连接成功时的回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket连接已打开&quot;</span>);<br>    &#125;;<br><br>    <span class="hljs-comment">// 接收到消息时的回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;接收到消息:&quot;</span>, event.<span class="hljs-property">data</span>);<br>    &#125;;<br><br>    <span class="hljs-comment">// 发生错误时的回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket发生错误&quot;</span>);<br>    &#125;;<br><br>    <span class="hljs-comment">// 连接关闭时的回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;WebSocket连接已关闭&quot;</span>);<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">send</span>(<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(message);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;WebSocket连接未建立&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">close</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">const</span> webSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketSingleton</span>(<span class="hljs-string">&quot;ws://localhost:8080&quot;</span>);<br>webSocket.<span class="hljs-title function_">connect</span>();<br>webSocket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello, WebSocket!&quot;</span>);<br>webSocket.<span class="hljs-title function_">close</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Websoket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2024/06/15/html/"/>
    <url>/2024/06/15/html/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h5 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h5><pre><code class="hljs">&lt;a&gt; 链接&lt;b&gt; 加粗&lt;i&gt; 斜体&lt;u&gt; 下划线&lt;s&gt; 删除线&lt;sub&gt; 下标&lt;sup&gt; 上标&lt;span&gt; 行内容器&lt;img&gt; 图片&lt;input&gt; 输入框&lt;label&gt; 表单标签&lt;select&gt; 下拉选择框&lt;textarea&gt; 多行文本框&lt;button&gt; 按钮&lt;br&gt; 换行&lt;hr&gt; 水平线</code></pre><h5 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h5><pre><code class="hljs">&lt;div&gt; 块级容器&lt;p&gt; 段落&lt;h1&gt; ~ &lt;h6&gt; 标题&lt;ul&gt; 无序列表&lt;ol&gt; 有序列表&lt;dl&gt; 定义列表&lt;table&gt; 表格&lt;form&gt; 表单&lt;fieldset&gt; 表单域&lt;legend&gt; 表单域标题&lt;blockquote&gt; 块引用&lt;pre&gt; 预格式化文本&lt;address&gt; 地址&lt;center&gt; 居中</code></pre><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><h5 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h5><pre><code class="hljs">width = contentheight = content模型转换box-sizing: content-box; // 标准盒模型</code></pre><h5 id="IE-盒模型"><a href="#IE-盒模型" class="headerlink" title="IE 盒模型"></a>IE 盒模型</h5><pre><code class="hljs">width = content + padding + borderheight = content + padding + border模型转换box-sizing: border-box; // IE盒模型</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2024/06/14/CSS/"/>
    <url>/2024/06/14/CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>基本选择器<ul><li>标签选择器</li><li>类选择器</li><li>id 选择器</li><li>通配符选择器</li><li>属性选择器</li><li>伪类选择器</li><li>伪元素选择器</li></ul></li><li>组合选择器<ul><li>后代选择器</li><li>子元素选择器</li><li>相邻兄弟选择器</li><li>通用兄弟选择器</li></ul></li><li>伪类选择器<ul><li>动态伪类选择器</li></ul></li></ul><h3 id="重绘重排"><a href="#重绘重排" class="headerlink" title="重绘重排"></a>重绘重排</h3><ul><li><p>重绘</p><ul><li>元素的外观发生改变时会触发重绘，例如：修改元素的颜色或者背景色时会导致页面重新绘制</li></ul></li><li><p>重排</p><ul><li>指页面重新排列，dom 的变化影响了元素的布局，例如：页面初始化时，对 dom 节点进行增删改时，浏览器窗口的 resize 发生改变时都会触发重排</li></ul></li><li><p>重排必然会导致重绘，重绘不一定导致重排</p></li><li><p>display:none; (隐藏元素不占位) 会导致重排和重绘</p></li><li><p>visibility:hidden; (隐藏元素占位) 只会导致重绘，不会导致重排</p></li></ul><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><ul><li>媒体查询<ul><li>媒体查询是 CSS3 引入的，通过媒体查询可以针对不同的媒体类型定义不同的样式</li><li>媒体查询可以针对不同的屏幕尺寸、不同的设备类型、不同的设备方向进行响应式布局</li><li>媒体查询的语法格式如下：</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> mediatype <span class="hljs-keyword">and</span>|<span class="hljs-keyword">not</span>|<span class="hljs-keyword">only</span> (media feature) &#123;<br>  CSS代码;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>媒体查询的 mediatype 属性<ul><li>all: 用于所有设备</li><li>print: 用于打印机和打印预览</li><li>screen: 用于电脑屏幕、平板电脑、智能手机等</li><li>speech: 用于屏幕阅读器等发声设备</li></ul></li><li>媒体查询的 media feature 属性<ul><li>width: 定义视口的宽度</li><li>height: 定义视口的高度</li><li>max-width: 定义视口的最大宽度</li><li>min-width: 定义视口的最小宽度</li><li>max-height: 定义视口的最大高度</li><li>min-height: 定义视口的最小高度</li><li>orientation: 定义视口的横纵比例</li><li>aspect-ratio: 定义视口的宽高比例</li><li>color: 定义视口的颜色深度</li><li>color-index: 定义视口的颜色索引值</li><li>resolution: 定义视口的分辨率</li><li>scan: 定义视口的扫描方式</li><li>grid: 定义视口的栅格是否为网格</li><li>pointer: 定义视口的指针类型</li><li>hover: 定义视口的鼠标悬停状态</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS</title>
    <link href="/2024/06/13/js/"/>
    <url>/2024/06/13/js/</url>
    
    <content type="html"><![CDATA[<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2024/06/12/es6/"/>
    <url>/2024/06/12/es6/</url>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器</title>
    <link href="/2024/06/11/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/2024/06/11/%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/2024/06/10/react/"/>
    <url>/2024/06/10/react/</url>
    
    <content type="html"><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2024/06/10/VUE/"/>
    <url>/2024/06/10/VUE/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Webpack</title>
    <link href="/2024/06/10/webpack/"/>
    <url>/2024/06/10/webpack/</url>
    
    <content type="html"><![CDATA[<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TS</title>
    <link href="/2024/06/10/TS/"/>
    <url>/2024/06/10/TS/</url>
    
    <content type="html"><![CDATA[<h2 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>布尔类型(boolean)</li><li>数字类型(number)</li><li>字符串类型(string)</li><li>数组类型(array)</li><li>元组类型(tuple)</li><li>枚举类型(enum)</li><li>任意类型(any)</li><li>空值类型(void)</li><li>对象类型(object)</li><li>联合类型(union)</li><li>类型断言(as)</li><li>类型推断(infer)</li><li>类型别名(type)</li><li>类型兼容性(compatible)</li><li>类型保护(protect)</li><li>类型声明(declare)</li><li>类型注解(annotate)</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手写题</title>
    <link href="/2024/06/09/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    <url>/2024/06/09/%E6%89%8B%E5%86%99%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="手写题"><a href="#手写题" class="headerlink" title="手写题"></a>手写题</h2><h4 id="实现-Promise-all"><a href="#实现-Promise-all" class="headerlink" title="实现 Promise.all"></a>实现 Promise.all</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//静态方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-title function_">all</span>(<span class="hljs-params">promiseArr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-comment">//声明一个计数器 每一个promise返回就加一</span><br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mypromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promiseArr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//这里用 Promise.resolve包装一下 防止不是Promise类型传进来</span><br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promiseArr[i]).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">//这里不能直接push数组  因为要控制顺序一一对应(感谢评论区指正)</span><br>          result[i] = res;<br>          count++;<br>          <span class="hljs-comment">//只有全部的promise执行成功之后才resolve出去</span><br>          <span class="hljs-keyword">if</span> (count === promiseArr.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-title function_">resolve</span>(result);<br>          &#125;<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(err);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现-Promise-finally"><a href="#实现-Promise-finally" class="headerlink" title="实现 Promise.finally"></a>实现 Promise.finally</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finally</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">callback</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">callback</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">throw</span> err;<br>      &#125;);<br>    &#125;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现-Promise-allSettled"><a href="#实现-Promise-allSettled" class="headerlink" title="实现 Promise.allSettled"></a>实现 Promise.allSettled</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">allSettled</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promiseArr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    promiseArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>          result.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;fulfilled&quot;</span>,<br>            <span class="hljs-attr">value</span>: val,<br>          &#125;);<br>          <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span> === promiseArr.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-title function_">resolve</span>(result);<br>          &#125;<br>        &#125;,<br>        <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          result.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;rejected&quot;</span>,<br>            <span class="hljs-attr">reason</span>: err,<br>          &#125;);<br>          <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span> === promiseArr.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-title function_">resolve</span>(result);<br>          &#125;<br>        &#125;<br>      );<br>    &#125;);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现-Promise-race"><a href="#实现-Promise-race" class="headerlink" title="实现 Promise.race"></a>实现 Promise.race</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">//静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">race</span>(<span class="hljs-params">promiseArr</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mypromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promiseArr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promiseArr[i]).<span class="hljs-title function_">then</span>(<br>          <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//promise数组只要有任何一个promise 状态变更  就可以返回</span><br>            <span class="hljs-title function_">resolve</span>(res);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">reject</span>(err);<br>          &#125;<br>        );<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//reduce + includes 去重</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniq</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!prev.<span class="hljs-title function_">includes</span>(next)) &#123;<br>      prev.<span class="hljs-title function_">push</span>(next);<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>  &#125;, []);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">uniq</span>(arr));<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unq</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!prev.<span class="hljs-title function_">includes</span>(next)) &#123;<br>      prev.<span class="hljs-title function_">push</span>(next);<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flot</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])) &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flot</span>(arr[i]));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      retult = result.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flot</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> prev.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next) ? <span class="hljs-title function_">flat</span>(next) : next);<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的forEach方法"><a href="#实现es6数组的forEach方法" class="headerlink" title="实现es6数组的forEach方法"></a>实现<code>es6</code>数组的<code>forEach</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myForEach</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">fn</span>(arr[i], i, arr);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的filter方法"><a href="#实现es6数组的filter方法" class="headerlink" title="实现es6数组的filter方法"></a>实现<code>es6</code>数组的<code>filter</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">myFilter</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">let</span> newArr = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">fn</span>(arr[i], i, arr)) &#123;<br>            newArr.<span class="hljs-title function_">push</span>(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的reduce方法"><a href="#实现es6数组的reduce方法" class="headerlink" title="实现es6数组的reduce方法"></a>实现<code>es6</code>数组的<code>reduce</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myReduce</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, params</span>) &#123;<br>  <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> prev = params;<br>  <span class="hljs-keyword">if</span> (!params) &#123;<br>    index = <span class="hljs-number">1</span>;<br>    prev = arr[<span class="hljs-number">0</span>];<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    prev = <span class="hljs-title function_">fn</span>(prev, arr[i], i, arr);<br>  &#125;<br>  <span class="hljs-keyword">return</span> prev;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的map方法"><a href="#实现es6数组的map方法" class="headerlink" title="实现es6数组的map方法"></a>实现<code>es6</code>数组的<code>map</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">myMap</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">let</span> newArr = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        newArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">fn</span>(arr[i], i, arr));<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的find方法"><a href="#实现es6数组的find方法" class="headerlink" title="实现es6数组的find方法"></a>实现<code>es6</code>数组的<code>find</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">myFind</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">fn</span>(arr[i], i, arr)) &#123;<br>            <span class="hljs-keyword">return</span> arr[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的findIndex方法"><a href="#实现es6数组的findIndex方法" class="headerlink" title="实现es6数组的findIndex方法"></a>实现<code>es6</code>数组的<code>findIndex</code>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myFindIndex</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">fn</span>(arr[i], i, arr)) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现es6数组的every方法"><a href="#实现es6数组的every方法" class="headerlink" title="实现es6数组的every方法"></a>实现<code>es6</code>数组的<code>every</code>方法</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myEvery</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">fn</span>(arr[i], i, arr))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="实现es6数组的some方法"><a href="#实现es6数组的some方法" class="headerlink" title="实现es6数组的some方法"></a>实现<code>es6</code>数组的<code>some</code>方法</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mySome</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">fn</span>(arr[i], i, arr)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="实现es6数组的includes方法"><a href="#实现es6数组的includes方法" class="headerlink" title="实现es6数组的includes方法"></a>实现<code>es6</code>数组的<code>includes</code>方法</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myIncludes</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-comment">// 第二个参数为整数，从前面第index个位置往后找</span><br>    <span class="hljs-comment">// 为负数，从后面数index个开始往后找</span><br>    <span class="hljs-comment">// 如果不输入从0开始向后找</span><br>    <span class="hljs-keyword">let</span> fIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(index !== <span class="hljs-literal">undefined</span> &amp;&amp; <span class="hljs-keyword">typeof</span> index === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; !<span class="hljs-built_in">isNaN</span> &amp;&amp; index !== <span class="hljs-title class_">Infinity</span>) fIndex = index;<br>    <span class="hljs-keyword">if</span>(fIndex &lt; <span class="hljs-number">0</span>) fIndex = arr.<span class="hljs-property">length</span>+fIndex;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=fIndex; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-comment">// Object.is(value1, value2) 判断两个值是否为同一个值</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(arr[i], value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="实现es6数组的flat方法"><a href="#实现es6数组的flat方法" class="headerlink" title="实现es6数组的flat方法"></a>实现<code>es6</code>数组的<code>flat</code>方法</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myFlat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">value = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">this</span>];<br>    <span class="hljs-keyword">if</span>(value === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> arr;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&quot;number&quot;</span> || <span class="hljs-built_in">isNaN</span>(value)) value = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next)) &#123;<br>            <span class="hljs-keyword">return</span> [...prev, ...next.<span class="hljs-title function_">myFlat</span>(value-<span class="hljs-number">1</span>)];<br>        &#125;<br>        <span class="hljs-keyword">return</span> [...prev, next];<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="实现防抖-debounce"><a href="#实现防抖-debounce" class="headerlink" title="实现防抖 debounce"></a>实现防抖 debounce</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, time</span>) &#123;<br>  <span class="hljs-comment">//要限制防抖的函数,限制时间</span><br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!timer) &#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">//当前this指向btn，实参集合</span><br>    &#125;, time);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现节流函数-throttle"><a href="#实现节流函数-throttle" class="headerlink" title="实现节流函数 throttle"></a>实现节流函数 throttle</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, time</span>) &#123;<br>  <span class="hljs-keyword">let</span> date = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> newDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">if</span> (newDate - date &gt; time) &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>      date = newDate;<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写一个完整的深拷贝"><a href="#写一个完整的深拷贝" class="headerlink" title="写一个完整的深拷贝"></a>写一个完整的深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>) &#123;<br>       <span class="hljs-keyword">let</span> newObj = obj instancef <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;  <span class="hljs-comment">//判断传入的值是不是数组 true?[]:&#123;&#125;</span><br>       <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;object&quot;</span>) &#123;  <span class="hljs-comment">//判断传入的值是不是object</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123; <span class="hljs-comment">//如果是for in 循环</span><br>               <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;  <span class="hljs-comment">//</span><br>                   <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                       newObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key])<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       newObj[key] = obj[key]<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> newObj  <span class="hljs-comment">//不是 直接返回</span><br>   &#125;<br>   <span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>   <span class="hljs-keyword">let</span> b = <span class="hljs-title function_">deepClone</span>(a)<br>   a[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b);<br></code></pre></td></tr></table></figure><h4 id="实现-new-关键字编写"><a href="#实现-new-关键字编写" class="headerlink" title="实现 new 关键字编写"></a>实现 new 关键字编写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objectFactory</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>  <span class="hljs-title class_">Constructor</span> = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>  obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>  <span class="hljs-keyword">var</span> ret = <span class="hljs-title class_">Constructor</span>.<span class="hljs-title function_">apply</span>(obj, <span class="hljs-variable language_">arguments</span>);<br><br>  <span class="hljs-comment">// ret || obj 这里这么写考虑了构造函数显示返回 null 的情况</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&quot;object&quot;</span> ? ret || obj : obj;<br>&#125;<br><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-title function_">objectFactory</span>(person, <span class="hljs-string">&quot;布兰&quot;</span>, <span class="hljs-number">12</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p); <span class="hljs-comment">// &#123; name: &#x27;布兰&#x27;, age: 12 &#125;</span><br></code></pre></td></tr></table></figure><h4 id="Es5-实现继承-Es6-实现继承"><a href="#Es5-实现继承-Es6-实现继承" class="headerlink" title="Es5 实现继承&amp;Es6 实现继承"></a>Es5 实现继承&amp;Es6 实现继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 原型链继承</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>];<br>&#125;<br><span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getColor</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><br><span class="hljs-keyword">let</span> dog1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>dog1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;brown&quot;</span>);<br><span class="hljs-keyword">let</span> dog2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog2.<span class="hljs-property">colors</span>); <span class="hljs-comment">// [&#x27;black&#x27;, &#x27;white&#x27;, &#x27;brown&#x27;]</span><br><br><span class="hljs-comment">// 组合继承</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>];<br>&#125;<br><span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Dog</span>;<br><br><span class="hljs-keyword">let</span> dog1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;奶昔&quot;</span>, <span class="hljs-number">2</span>);<br>dog1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;brown&quot;</span>);<br><span class="hljs-keyword">let</span> dog2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;哈赤&quot;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog2);<br><span class="hljs-comment">// &#123; name: &quot;哈赤&quot;, colors: [&quot;black&quot;, &quot;white&quot;], age: 1 &#125;</span><br><br><span class="hljs-comment">// 借用构造函数(经典继承)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><br><span class="hljs-comment">// 寄生组合式继承</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">child, parent</span>) &#123;<br>  <span class="hljs-keyword">let</span> prototype = <span class="hljs-title function_">object</span>(parent.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>  prototype.<span class="hljs-property">constructor</span> = child;<br>  child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype;<br>&#125;<br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">Dog</span>, <span class="hljs-title class_">Animal</span>);<br><span class="hljs-comment">//class实现继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>  <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="手写-Call"><a href="#手写-Call" class="headerlink" title="手写 Call"></a>手写 Call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, a, b, c, d);<br>&#125;<br><span class="hljs-keyword">let</span> egg = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小雅&quot;</span>,<br>&#125;;<br><span class="hljs-comment">// 封装mycall</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mycall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//这里注意this不能指向null</span><br>  <span class="hljs-keyword">let</span> newArgs = []; <span class="hljs-comment">//需要拿到每一个arguments集合</span><br>  obj.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//循环arguments集合,这里从下标1开始，第0项是this指向</span><br>    newArgs.<span class="hljs-title function_">push</span>(<span class="hljs-string">`arguments[<span class="hljs-subst">$&#123;i&#125;</span>]`</span>);<br>  &#125;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-built_in">eval</span>(<span class="hljs-string">`obj.fn(<span class="hljs-subst">$&#123;newArgs&#125;</span>)`</span>);<br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">fn</span>;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-title function_">mycall</span>(egg, &#123;&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(egg, &#123;&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mycall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>;<br>  obj.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br><br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">fn</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="手写-Apply"><a href="#手写-Apply" class="headerlink" title="手写 Apply"></a>手写 Apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, a, b);<br>  <span class="hljs-comment">// return 123</span><br>&#125;<br><span class="hljs-keyword">let</span> egg = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小雅&quot;</span>,<br>&#125;;<br><span class="hljs-comment">//封装myapply</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.需要注意的是第二个参数</span><br><span class="hljs-comment">        2.this指向问题</span><br><span class="hljs-comment">        3.返回值</span><br><span class="hljs-comment">        4.this为null时</span><br><span class="hljs-comment">    */</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myapply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, args</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//这里注意this不能指向null</span><br>  <span class="hljs-keyword">let</span> newArgs = []; <span class="hljs-comment">//需要拿到每一个arguments集合</span><br>  <span class="hljs-keyword">let</span> res = <span class="hljs-literal">null</span>;<br>  obj.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">if</span> (!args) &#123;<br>    <span class="hljs-comment">// 如果没有传第二个参数 直接返回当前的方法</span><br>    res = obj.<span class="hljs-title function_">fn</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//如果有 循环遍历把每一项放到一个空数组里 然后使用eval()函数 将方法调用并传入新数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">//循环arguments集合,这里从下标1开始，第0项是this指向</span><br>      newArgs.<span class="hljs-title function_">push</span>(<span class="hljs-string">`args[<span class="hljs-subst">$&#123;i&#125;</span>]`</span>);<br>    &#125;<br>    res = <span class="hljs-built_in">eval</span>(<span class="hljs-string">`obj.fn(<span class="hljs-subst">$&#123;newArgs&#125;</span>)`</span>);<br>  &#125;<br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">fn</span>; <span class="hljs-comment">//删除当前的方法</span><br>  <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//返回值</span><br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">myapply</span>(egg, [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>]);<br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">apply</span>(egg, [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>]);<br></code></pre></td></tr></table></figure><h4 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, a, b);<br>  <span class="hljs-comment">// return 123</span><br>&#125;<br><span class="hljs-keyword">let</span> egg = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小雅&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">//封装bind方法</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mybind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//将伪数组转化为数组 arguments调用此方法 1 从下标1开始</span><br>  <span class="hljs-keyword">let</span> arg = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//获取到当前函数的this指向</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//闭包的方式返回一个函数  //这里为es5方法 es6 ()=&gt;&#123;&#125; this继承父级 但是下边那个打印结果有问题，咱也不知道为啥</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    arg = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>    that.<span class="hljs-title function_">apply</span>(obj, [...args, ...arg]); <span class="hljs-comment">//这里考虑到了函数内部的值 合并一下参数</span><br>  &#125;;<br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">mybind</span>(egg, <span class="hljs-number">1</span>)(<span class="hljs-number">2</span>); <span class="hljs-comment">//调用的时候为柯函数里化</span><br></code></pre></td></tr></table></figure><h4 id="实现柯里化函数"><a href="#实现柯里化函数" class="headerlink" title="实现柯里化函数"></a>实现柯里化函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn, currArgs</span>) &#123;<br>  <span class="hljs-comment">// 这里的fn就是sum方法</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn, currArgs);<br>    <span class="hljs-comment">// 首次调用时未提供参数currArgs，因此不用进行拼接执行</span><br>    <span class="hljs-keyword">if</span> (currArgs) &#123;<br>      args = args.<span class="hljs-title function_">concat</span>(currArgs); <span class="hljs-comment">// 这里的currArgs是上次递归传递进来的，也就是上次递归的args</span><br>    &#125;<br>    <span class="hljs-comment">// 递归调用</span><br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &lt; fn.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">curry</span>(fn, args);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);<br>    <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args); <span class="hljs-comment">// 这里调用了apply方法，将收集起来的args参数全都传入fn中</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c, d, e</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c + d + e;<br>&#125;<br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">curry</span>(sum);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)(<span class="hljs-number">5</span>)); <span class="hljs-comment">//  6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><h4 id="实现-jsonp"><a href="#实现-jsonp" class="headerlink" title="实现 jsonp"></a>实现 jsonp</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">jsonp</span> = (<span class="hljs-params">&#123; url, params, callbackName &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateUrl</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> dataSrc = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> params) &#123;<br>      <span class="hljs-keyword">if</span> (params.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        dataSrc += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>&amp;`</span>;<br>      &#125;<br>    &#125;<br>    dataSrc += <span class="hljs-string">`callback=<span class="hljs-subst">$&#123;callbackName&#125;</span>`</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;url&#125;</span>?<span class="hljs-subst">$&#123;dataSrc&#125;</span>`</span>;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> scriptEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>    scriptEle.<span class="hljs-property">src</span> = <span class="hljs-title function_">generateUrl</span>();<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(scriptEle);<br>    <span class="hljs-variable language_">window</span>[callbackName] = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(data);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeChild</span>(scriptEle);<br>    &#125;;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="实现-instanceOf"><a href="#实现-instanceOf" class="headerlink" title="实现 instanceOf"></a>实现 instanceOf</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">instanceOf</span>(<span class="hljs-params">left, right</span>) &#123;<br>  <span class="hljs-keyword">let</span> proto = left.<span class="hljs-property">__proto__</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (proto === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (proto === right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    proto = proto.<span class="hljs-property">__proto__</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="图片懒加载，实现lazyLoad-这个方法，使之只显示当前屏幕图片并测试"><a href="#图片懒加载，实现lazyLoad-这个方法，使之只显示当前屏幕图片并测试" class="headerlink" title="图片懒加载，实现lazyLoad()这个方法，使之只显示当前屏幕图片并测试"></a>图片懒加载，实现<code>lazyLoad()</code>这个方法，使之只显示当前屏幕图片并测试</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> imgSrc = [<br>    <span class="hljs-string">&quot;./image/01.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/02.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/03.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/04.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/05.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/06.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/07.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/08.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/09.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/10.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/11.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/12.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/13.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/14.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/15.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/16.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/17.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/18.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/19.jpeg&quot;</span>,<br>    <span class="hljs-string">&quot;./image/20.jpeg&quot;</span><br>];<br><span class="hljs-keyword">let</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;image&#x27;</span>);<br><span class="hljs-keyword">let</span> imgs = [...image.<span class="hljs-property">children</span>];<br><span class="hljs-comment">// 设置图片的自定定义属性src</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;imgs.<span class="hljs-property">length</span>; i++) &#123;<br>    imgs[i].<span class="hljs-property">dataset</span>.<span class="hljs-property">src</span> = imgSrc[i];<br>&#125;<br><br><span class="hljs-keyword">let</span> len = imgs.<span class="hljs-property">length</span>;<br><br><span class="hljs-keyword">const</span> lazyLoad = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> deleteIndex = [];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;imgs.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(imgs[i].<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span> &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &#123;<br>                imgs[i].<span class="hljs-property">src</span> = imgs[i].<span class="hljs-property">dataset</span>.<span class="hljs-property">src</span>;<br>                deleteIndex.<span class="hljs-title function_">push</span>(i)<br>            &#125;<br>        &#125;<br>        imgs = imgs.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> !deleteIndex.<span class="hljs-title function_">includes</span>(index)<br>        &#125;)<br>        <span class="hljs-keyword">if</span>(imgs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, lazyLoad);<br>        &#125;<br>    &#125;<br>&#125;)()<br><br><span class="hljs-title function_">lazyLoad</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, lazyLoad);<br></code></pre></td></tr></table></figure></code></pre><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&#123;<br>    <span class="hljs-title function_">contructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br><br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">join</span>();<br>    &#125;<br><br>    <span class="hljs-title function_">push</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(val);<br>    &#125;<br><br>    <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">pop</span>();<br>    &#125;<br><br>    <span class="hljs-title function_">top</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">size = <span class="hljs-number">10</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span> = [];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>    &#125;<br><br>    <span class="hljs-title function_">enQueue</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isFull</span>()) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">deQueue</span>();<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">push</span>(val)<br>    &#125;<br><br>    <span class="hljs-title function_">deQueue</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">shift</span>();<br>    &#125;<br><br>    <span class="hljs-title function_">isFull</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">join</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">&#123;val, next&#125;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = val;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = next;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> _head = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;_head&#x27;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NodeList</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 初始一个头节点，不可访问，不能找到</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>, &#123;<br>            [_head]:&#123;<br>                <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">value</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(&#123;<span class="hljs-attr">val</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 插入节点</span><br>    <span class="hljs-title function_">insert</span>(<span class="hljs-params">val, index</span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(&#123;<span class="hljs-attr">val</span>: val, <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>&#125;)<br>        <span class="hljs-comment">// 如果没有头节点，插入的第一个节点就是头节点</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>[_head].<span class="hljs-property">val</span>) &#123;<br>            <span class="hljs-variable language_">this</span>[_head] = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果index没有值，插入到最后</span><br>        <span class="hljs-keyword">if</span>(!index) &#123;<br>            <span class="hljs-keyword">let</span> lastNode = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">find</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">size</span>()-<span class="hljs-number">1</span>);<br>            lastNode.<span class="hljs-property">next</span> = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果index为0，替换头节点</span><br>        <span class="hljs-keyword">if</span>(index === <span class="hljs-number">0</span>) &#123;<br>            node.<span class="hljs-property">next</span> = <span class="hljs-variable language_">this</span>[_head];<br>            <span class="hljs-variable language_">this</span>[_head] = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 其余正常的，先获取上一个节点</span><br>        <span class="hljs-keyword">let</span> prevNode = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">find</span>(index-<span class="hljs-number">1</span>);<br>        node.<span class="hljs-property">next</span> = prevNode.<span class="hljs-property">next</span>;<br>        prevNode.<span class="hljs-property">next</span> = node;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断链表长度</span><br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-variable language_">this</span>[_head];<br>        <span class="hljs-keyword">while</span>(n) &#123;<br>            n = n.<span class="hljs-property">next</span>;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-comment">// 将链表转成字符串形式</span><br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-variable language_">this</span>[_head];<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(n)&#123;<br>            str += n.<span class="hljs-property">val</span>;<br>            <span class="hljs-keyword">if</span>(n.<span class="hljs-property">next</span>) &#123;<br>                str += <span class="hljs-string">&quot;, &quot;</span><br>            &#125;<br>            n = n.<span class="hljs-property">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取节点</span><br>    <span class="hljs-title function_">find</span>(<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-variable language_">this</span>[_head];<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i !== index) &#123;<br>            i++;<br>            n = n.<span class="hljs-property">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><br>    <span class="hljs-comment">// 转为数组</span><br>    <span class="hljs-title function_">toArray</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-variable language_">this</span>[_head];<br>        <span class="hljs-keyword">let</span> arr = [];<br>        <span class="hljs-keyword">while</span>(n) &#123;<br>            arr.<span class="hljs-title function_">push</span>(n.<span class="hljs-property">val</span>);<br>            n = n.<span class="hljs-property">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">val, index</span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">find</span>(index);<br>        node.<span class="hljs-property">val</span> = val;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-title function_">deleteByIndex</span>(<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">find</span>(index);<br><br>        <span class="hljs-comment">// 如果删除的是头节点</span><br>        <span class="hljs-keyword">if</span>(index === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>[_head] = node.<span class="hljs-property">next</span>;<br>            node.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> prevNode = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">find</span>(index-<span class="hljs-number">1</span>);<br>        prevNode.<span class="hljs-property">next</span> = node.<span class="hljs-property">next</span>;<br>        node.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">val, left, right</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = val;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = left;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = right;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">5</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">6</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">let</span> node_6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-number">7</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>head.<span class="hljs-property">left</span> = node_1;<br>head.<span class="hljs-property">right</span> = node_2;<br>node_1.<span class="hljs-property">left</span> = node_3;<br>node_1.<span class="hljs-property">right</span> = node_4;<br>node_2.<span class="hljs-property">left</span> = node_5;<br>node_2.<span class="hljs-property">right</span> = node_6;<br>node_3.<span class="hljs-property">left</span> = node_7;<br><br><br><span class="hljs-comment">// 实现树的中序遍历</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">head</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">let</span> stack = [head];<br>    <span class="hljs-keyword">let</span> n = head.<span class="hljs-property">left</span>;<br>    <span class="hljs-keyword">while</span>(stack.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">while</span>(n) &#123;  <span class="hljs-comment">// 将n变为最左边的值</span><br>            stack.<span class="hljs-title function_">push</span>(n);<br>            n = n.<span class="hljs-property">left</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> node = stack.<span class="hljs-title function_">pop</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(node.<span class="hljs-property">val</span>);<br>        <span class="hljs-keyword">if</span> (node.<span class="hljs-property">right</span>) &#123;<br>            stack.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">right</span>);<br>            n = node.<span class="hljs-property">right</span>.<span class="hljs-property">left</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现树的先序遍历</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">prevOrder</span>(<span class="hljs-params">head</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">let</span> stack = [head];<br>    <span class="hljs-keyword">while</span>(stack.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">let</span> n = stack.<span class="hljs-title function_">pop</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n.<span class="hljs-property">val</span>);<br>        n.<span class="hljs-property">right</span> &amp;&amp; stack.<span class="hljs-title function_">push</span>(n.<span class="hljs-property">right</span>);<br>        n.<span class="hljs-property">left</span> &amp;&amp; stack.<span class="hljs-title function_">push</span>(n.<span class="hljs-property">left</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现树的层序遍历</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">order</span>(<span class="hljs-params">head</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">let</span> queue = [head];<br>    <span class="hljs-keyword">while</span>(queue.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">let</span> n = queue.<span class="hljs-title function_">shift</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n.<span class="hljs-property">val</span>);<br>        n.<span class="hljs-property">left</span> &amp;&amp; queue.<span class="hljs-title function_">push</span>(n.<span class="hljs-property">left</span>);<br>        n.<span class="hljs-property">right</span> &amp;&amp; queue.<span class="hljs-title function_">push</span>(n.<span class="hljs-property">right</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2024/06/09/%E7%AE%97%E6%B3%95/"/>
    <url>/2024/06/09/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h4 id="实现千位分隔符"><a href="#实现千位分隔符" class="headerlink" title="实现千位分隔符"></a>实现千位分隔符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-params">x</span>) &#123;<br>  x = x.<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/(-?\d+)(\d&#123;3&#125;)/</span>;<br>  <span class="hljs-keyword">while</span> (pattern.<span class="hljs-title function_">test</span>(x)) x = x.<span class="hljs-title function_">replace</span>(pattern, <span class="hljs-string">&quot;$1,$2&quot;</span>);<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-number">12312124545</span>); <span class="hljs-comment">//&#x27;12,312,124,545&#x27;</span><br><span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-number">123121245.45</span>); <span class="hljs-comment">//&#x27;123,121,245.45&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>; j&lt;arr.<span class="hljs-property">length</span>-i; j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[j] &lt; arr[j-<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> temp = arr[j];<br>                arr[j] = arr[j-<span class="hljs-number">1</span>];<br>                arr[j-<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bubbleSort</span>([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectionSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> min = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=i+<span class="hljs-number">1</span>; j&lt;arr.<span class="hljs-property">length</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[j] &lt; arr[min]) &#123;<br>                min = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> temp = arr[i];<br>        arr[i] = arr[min];<br>        arr[min] = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">selectionSort</span>([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> current = arr[i];<br>        <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; current) &#123;<br>            arr[j+<span class="hljs-number">1</span>] = arr[j];<br>            j--;<br>        &#125;<br>        arr[j+<span class="hljs-number">1</span>] = current;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">insertionSort</span>([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span>(arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">let</span> pivotIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(arr.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> pivot = arr.<span class="hljs-title function_">splice</span>(pivotIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> left = [];<br>    <span class="hljs-keyword">let</span> right = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt; pivot) &#123;<br>            left.<span class="hljs-title function_">push</span>(arr[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right.<span class="hljs-title function_">push</span>(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [...<span class="hljs-title function_">quickSort</span>(left), pivot, ...<span class="hljs-title function_">quickSort</span>(right)];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">quickSort</span>([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span>(arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;<br>    <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(arr.<span class="hljs-property">length</span>/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> left = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, mid);<br>    <span class="hljs-keyword">let</span> right = arr.<span class="hljs-title function_">slice</span>(mid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(<span class="hljs-title function_">mergeSort</span>(left), <span class="hljs-title function_">mergeSort</span>(right));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">left, right</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = [];<br>    <span class="hljs-keyword">while</span>(left.<span class="hljs-property">length</span> &amp;&amp; right.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">if</span>(left[<span class="hljs-number">0</span>] &lt; right[<span class="hljs-number">0</span>]) &#123;<br>            result.<span class="hljs-title function_">push</span>(left.<span class="hljs-title function_">shift</span>())<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            result.<span class="hljs-title function_">push</span>(right.<span class="hljs-title function_">shift</span>())<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(left.<span class="hljs-property">length</span>) &#123;<br>        result.<span class="hljs-title function_">push</span>(left.<span class="hljs-title function_">shift</span>())<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(right.<span class="hljs-property">length</span>) &#123;<br>        result.<span class="hljs-title function_">push</span>(right.<span class="hljs-title function_">shift</span>())<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bSearch</span>(<span class="hljs-params">arr, target</span>) &#123;<br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> high = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>    <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low + high) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (arr[mid] === target) <span class="hljs-keyword">return</span> mid;<br>    <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>      high = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      low = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求数组的交集并集差集"><a href="#求数组的交集并集差集" class="headerlink" title="求数组的交集并集差集"></a>求数组的交集并集差集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// 求交集</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">nums1, nums2</span>) &#123;<br>  <span class="hljs-keyword">return</span> nums1.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums2).<span class="hljs-title function_">has</span>(item);<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">intersection</span>(nums1, nums2));<br><br><span class="hljs-comment">// 求并集</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumSet</span>(<span class="hljs-params">nums1, nums2</span>) &#123;<br>  <span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums1), ...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums2)])];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sumSet</span>(nums1, nums2));<br><br><span class="hljs-comment">// 求差集</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">differenceSet</span>(<span class="hljs-params">nums1, nums2</span>) &#123;<br>  <span class="hljs-keyword">return</span> nums1<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums2).<span class="hljs-title function_">has</span>(item))<br>    .<span class="hljs-title function_">concat</span>(nums2.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums1).<span class="hljs-title function_">has</span>(item)));<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">differenceSet</span>(nums1, nums2));<br></code></pre></td></tr></table></figure><h4 id="实现方法rotate-arr-k-，第一个参数为数组，第二个参数为非负数，将数组向右移动-k-步"><a href="#实现方法rotate-arr-k-，第一个参数为数组，第二个参数为非负数，将数组向右移动-k-步" class="headerlink" title="实现方法rotate(arr, k)，第一个参数为数组，第二个参数为非负数，将数组向右移动 k 步"></a>实现方法<code>rotate(arr, k)</code>，第一个参数为数组，第二个参数为非负数，将数组向右移动 k 步</h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">arr, num</span>) &#123;<br>    <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br>    num = num%len;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">slice</span>(num).<span class="hljs-title function_">concat</span>(arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, num));<br>&#125;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-title function_">rotate</span>(arr, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></code></pre><h4 id="给定一个字符串-str，返回字符串中字母顺序最大的并且同时在字符串中出现大写和小写的字母，不存在返回"><a href="#给定一个字符串-str，返回字符串中字母顺序最大的并且同时在字符串中出现大写和小写的字母，不存在返回" class="headerlink" title="给定一个字符串 str，返回字符串中字母顺序最大的并且同时在字符串中出现大写和小写的字母，不存在返回~"></a>给定一个字符串 str，返回字符串中字母顺序最大的并且同时在字符串中出现大写和小写的字母，不存在返回<code>~</code></h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printBigLetter</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<span class="hljs-keyword">return</span> b.<span class="hljs-title function_">charCodeAt</span>() - a.<span class="hljs-title function_">charCodeAt</span>()&#125;)<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(arr[index].<span class="hljs-title function_">charCodeAt</span>() &gt; <span class="hljs-number">90</span>) &#123;<br>        <span class="hljs-comment">// 找大写，如果arr[i].charCodeAt()&lt;90就不再循环</span><br>        <span class="hljs-keyword">if</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">lastIndexOf</span>(arr[index].<span class="hljs-title function_">toUpperCase</span>()) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> arr[index].<span class="hljs-title function_">toUpperCase</span>();<br>        &#125;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="回文括号-，"><a href="#回文括号-，" class="headerlink" title="回文括号 {[({[]})]}，[{)]"></a>回文括号 <code>&#123;[(&#123;[]&#125;)]&#125;</code>，<code>[&#123;)]</code></h4><pre><code class="hljs"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">palindromeBrackets</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">let</span> stack = [];<br>    <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-string">&#x27;(&#x27;</span> : <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span> : <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span> : <span class="hljs-string">&#x27;]&#x27;</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] === <span class="hljs-string">&#x27;(&#x27;</span>) &#123;stack.<span class="hljs-title function_">push</span>(obj[arr[i]])&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] === <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;stack.<span class="hljs-title function_">push</span>(obj[arr[i]])&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] === <span class="hljs-string">&#x27;[&#x27;</span>) &#123;stack.<span class="hljs-title function_">push</span>(obj[arr[i]])&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] !== stack[stack.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>] || stack.<span class="hljs-property">length</span>===<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> stack.<span class="hljs-title function_">pop</span>();<br>    &#125;<br>    <span class="hljs-comment">// 如果栈中还有值，说明左边括号多，返回false</span><br>    <span class="hljs-keyword">if</span>(stack.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2024/06/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/06/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>保证一个类仅有一个实例，并提供一个访问它的全局访问点</li><li>实现：<ul><li>私有化构造函数</li><li>静态化方法，返回实例</li><li>私有化静态变量</li><li>私有化静态方法</li><li>静态方法中判断实例是否存在，存在则返回，不存在则创建</li></ul></li><li>应用场景：<ul><li>弹框</li><li>登录框</li><li>购物车</li><li>全局缓存</li><li>全局唯一的数据源</li></ul></li><li>优点：<ul><li>只有一个实例，减少内存开销</li><li>避免对资源的多重占用</li><li>设置全局访问点，严格控制访问</li></ul></li><li>缺点：<ul><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出</li></ul></li></ul><h5 id="单例模式实现弹框-TS-实现"><a href="#单例模式实现弹框-TS-实现" class="headerlink" title="单例模式实现弹框 - TS 实现"></a>单例模式实现弹框 - TS 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Login</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> div = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!div) &#123;<br>      div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>      div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;div class=&quot;msk&quot;&gt;</span><br><span class="hljs-string">                    &lt;button id=&quot;close&quot;&gt;点击关闭&lt;/button&gt;</span><br><span class="hljs-string">                    &lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="hljs-string">                    &lt;p&gt;内容&lt;/p&gt;</span><br><span class="hljs-string">                    &lt;/div&gt;`</span>;<br>      div.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;#eee&quot;</span>;<br>      div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;300px&quot;</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div);<br>    &#125;<br>    <span class="hljs-keyword">return</span> div;<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> login = <span class="hljs-title class_">Login</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(login);<br>  login.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;<br>  <span class="hljs-title function_">close</span>();<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;close&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> login = <span class="hljs-title class_">Login</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(login);<br>    login.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><ul><li>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</li><li>实现：<ul><li>创建一个事件中心，用来存放事件和事件监听器</li><li>订阅事件，将事件监听器添加到事件中心</li><li>发布事件，触发事件中心中的事件监听器</li></ul></li><li>应用场景：<ul><li>网页事件</li><li>用户行为</li><li>网页通知</li><li>跨窗口通信</li><li>异步编程</li></ul></li><li>优点：<ul><li>支持简单的广播通信，自动通知所有已经订阅过的对象</li><li>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用</li></ul></li><li>缺点：<ul><li>创建订阅者需要消耗一定的时间和内存</li><li>虽然可以弱化对象之间的联系，但是过度使用的话，会导致程序难以跟踪维护和理解</li></ul></li></ul><h5 id="发布订阅模式实现-TS-实现"><a href="#发布订阅模式实现-TS-实现" class="headerlink" title="发布订阅模式实现 - TS 实现"></a>发布订阅模式实现 - TS 实现</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = &#123;&#125;; <span class="hljs-comment">//实践中心 &#123;type:[]&#125;</span><br>  &#125;<br>  $on(<span class="hljs-keyword">type</span>, fn) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>]) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>] = [];<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>].<span class="hljs-title function_">push</span>(fn);<br>  &#125;<br>  $emit(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">item</span>();<br>    &#125;);<br>  &#125;<br>  $off(<span class="hljs-keyword">type</span>, fn) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (!fn) &#123;<br>      <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>];<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[<span class="hljs-keyword">type</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> item !== fn;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
